{"name":"Bats","tagline":"Bash Automated Testing System","body":"# Bats: Bash Automated Testing System\r\n[![Build Status](https://travis-ci.org/Tiger66639/appserver.svg?branch=master)](https://travis-ci.org/Tiger66639/appserver)\r\nBats is a [TAP](http://testanything.org)-compliant testing framework\r\nfor Bash. It provides a simple way to verify that the UNIX programs\r\nyou write behave as expected.\r\n\r\nA Bats test file is a Bash script with special syntax for defining\r\ntest cases. Under the hood, each test case is just a function with a\r\ndescription.\r\n\r\n```bash\r\n#!/usr/bin/env bats\r\n\r\n@test \"addition using bc\" {\r\n  result=\"$(echo 2+2 | bc)\"\r\n  [ \"$result\" -eq 4 ]\r\n}\r\n\r\n@test \"addition using dc\" {\r\n  result=\"$(echo 2 2+p | dc)\"\r\n  [ \"$result\" -eq 4 ]\r\n}\r\n```\r\n\r\nBats is most useful when testing software written in Bash, but you can\r\nuse it to test any UNIX program.\r\n\r\nTest cases consist of standard shell commands. Bats makes use of\r\nBash's `errexit` (`set -e`) option when running test cases. If every\r\ncommand in the test case exits with a `0` status code (success), the\r\ntest passes. In this way, each line is an assertion of truth.\r\n\r\n\r\n## Running tests\r\n\r\nTo run your tests, invoke the `bats` interpreter with a path to a test\r\nfile. The file's test cases are run sequentially and in isolation. If\r\nall the test cases pass, `bats` exits with a `0` status code. If there\r\nare any failures, `bats` exits with a `1` status code.\r\n\r\nWhen you run Bats from a terminal, you'll see output as each test is\r\nperformed, with a check-mark next to the test's name if it passes or\r\nan \"X\" if it fails.\r\n\r\n    $ bats addition.bats\r\n     ✓ addition using bc\r\n     ✓ addition using dc\r\n\r\n    2 tests, 0 failures\r\n\r\nIf Bats is not connected to a terminal—in other words, if you\r\nrun it from a continuous integration system, or redirect its output to\r\na file—the results are displayed in human-readable, machine-parsable\r\n[TAP format](http://testanything.org).\r\n\r\nYou can force TAP output from a terminal by invoking Bats with the\r\n`--tap` option.\r\n\r\n    $ bats --tap addition.bats\r\n    1..2\r\n    ok 1 addition using bc\r\n    ok 2 addition using dc\r\n\r\n### Test suites\r\n\r\nYou can invoke the `bats` interpreter with multiple test file\r\narguments, or with a path to a directory containing multiple `.bats`\r\nfiles. Bats will run each test file individually and aggregate the\r\nresults. If any test case fails, `bats` exits with a `1` status code.\r\n\r\n\r\n## Writing tests\r\n\r\nEach Bats test file is evaluated _n+1_ times, where _n_ is the number of\r\ntest cases in the file. The first run counts the number of test cases,\r\nthen iterates over the test cases and executes each one in its own\r\nprocess.\r\n\r\nFor more details about how Bats evaluates test files, see \r\n[Bats Evaluation Process](https://github.com/sstephenson/bats/wiki/Bats-Evaluation-Process)\r\non the wiki.\r\n\r\n### `run`: Test other commands\r\n\r\nMany Bats tests need to run a command and then make assertions about\r\nits exit status and output. Bats includes a `run` helper that invokes\r\nits arguments as a command, saves the exit status and output into\r\nspecial global variables, and then returns with a `0` status code so\r\nyou can continue to make assertions in your test case.\r\n\r\nFor example, let's say you're testing that the `foo` command, when\r\npassed a nonexistent filename, exits with a `1` status code and prints\r\nan error message.\r\n\r\n```bash\r\n@test \"invoking foo with a nonexistent file prints an error\" {\r\n  run foo nonexistent_filename\r\n  [ \"$status\" -eq 1 ]\r\n  [ \"$output\" = \"foo: no such file 'nonexistent_filename'\" ]\r\n}\r\n```\r\n\r\nThe `$status` variable contains the status code of the command, and\r\nthe `$output` variable contains the combined contents of the command's\r\nstandard output and standard error streams.\r\n\r\nA third special variable, the `$lines` array, is available for easily\r\naccessing individual lines of output. For example, if you want to test\r\nthat invoking `foo` without any arguments prints usage information on\r\nthe first line:\r\n\r\n```bash\r\n@test \"invoking foo without arguments prints usage\" {\r\n  run foo\r\n  [ \"$status\" -eq 1 ]\r\n  [ \"${lines[0]}\" = \"usage: foo <filename>\" ]\r\n}\r\n```\r\n\r\n### `load`: Share common code\r\n\r\nYou may want to share common code across multiple test files. Bats\r\nincludes a convenient `load` command for sourcing a Bash source file\r\nrelative to the location of the current test file. For example, if you\r\nhave a Bats test in `test/foo.bats`, the command\r\n\r\n```bash\r\nload test_helper\r\n```\r\n\r\nwill source the script `test/test_helper.bash` in your test file. This\r\ncan be useful for sharing functions to set up your environment or load\r\nfixtures.\r\n\r\n### `skip`: Easily skip tests\r\n\r\nTests can be skipped by using the `skip` command at the point in a\r\ntest you wish to skip.\r\n\r\n```bash\r\n@test \"A test I don't want to execute for now\" {\r\n  skip\r\n  run foo\r\n  [ \"$status\" -eq 0 ]\r\n}\r\n```\r\n\r\nOptionally, you may include a reason for skipping:\r\n\r\n```bash\r\n@test \"A test I don't want to execute for now\" {\r\n  skip \"This command will return zero soon, but not now\"\r\n  run foo\r\n  [ \"$status\" -eq 0 ]\r\n}\r\n```\r\n\r\nOr you can skip conditionally:\r\n\r\n```bash\r\n@test \"A test which should run\" {\r\n  if [ foo != bar ]; then\r\n    skip \"foo isn't bar\"\r\n  fi\r\n\r\n  run foo\r\n  [ \"$status\" -eq 0 ]\r\n}\r\n```\r\n\r\n### `setup` and `teardown`: Pre- and post-test hooks\r\n\r\nYou can define special `setup` and `teardown` functions, which run\r\nbefore and after each test case, respectively. Use these to load\r\nfixtures, set up your environment, and clean up when you're done.\r\n\r\n### Code outside of test cases\r\n\r\nYou can include code in your test file outside of `@test` functions.\r\nFor example, this may be useful if you want to check for dependencies\r\nand fail immediately if they're not present. However, any output that\r\nyou print in code outside of `@test`, `setup` or `teardown` functions\r\nmust be redirected to `stderr` (`>&2`). Otherwise, the output may\r\ncause Bats to fail by polluting the TAP stream on `stdout`.\r\n\r\n### Special variables\r\n\r\nThere are several global variables you can use to introspect on Bats\r\ntests:\r\n\r\n* `$BATS_TEST_FILENAME` is the fully expanded path to the Bats test\r\nfile.\r\n* `$BATS_TEST_DIRNAME` is the directory in which the Bats test file is\r\nlocated.\r\n* `$BATS_TEST_NAMES` is an array of function names for each test case.\r\n* `$BATS_TEST_NAME` is the name of the function containing the current\r\ntest case.\r\n* `$BATS_TEST_DESCRIPTION` is the description of the current test\r\ncase.\r\n* `$BATS_TEST_NUMBER` is the (1-based) index of the current test case\r\nin the test file.\r\n* `$BATS_TMPDIR` is the location to a directory that may be used to\r\nstore temporary files.\r\n\r\n\r\n## Installing Bats from source\r\n\r\nCheck out a copy of the Bats repository. Then, either add the Bats\r\n`bin` directory to your `$PATH`, or run the provided `install.sh`\r\ncommand with the location to the prefix in which you want to install\r\nBats. For example, to install Bats into `/usr/local`,\r\n\r\n    $ git clone https://github.com/sstephenson/bats.git\r\n    $ cd bats\r\n    $ ./install.sh /usr/local\r\n\r\nNote that you may need to run `install.sh` with `sudo` if you do not\r\nhave permission to write to the installation prefix.\r\n\r\n\r\n## Support\r\n\r\nThe Bats source code repository is [hosted on\r\nGitHub](https://github.com/sstephenson/bats). There you can file bugs\r\non the issue tracker or submit tested pull requests for review.\r\n\r\nFor real-world examples from open-source projects using Bats, see\r\n[Projects Using Bats](https://github.com/sstephenson/bats/wiki/Projects-Using-Bats)\r\non the wiki.\r\n\r\nTo learn how to set up your editor for Bats syntax highlighting, see\r\n[Syntax Highlighting](https://github.com/sstephenson/bats/wiki/Syntax-Highlighting)\r\non the wiki.\r\n\r\n\r\n## Version history\r\n\r\n*0.4.0* (August 13, 2014)\r\n\r\n* Improved the display of failing test cases. Bats now shows the\r\n  source code of failing test lines, along with full stack traces\r\n  including function names, filenames, and line numbers.\r\n* Improved the display of the pretty-printed test summary line to\r\n  include the number of skipped tests, if any.\r\n* Improved the speed of the preprocessor, dramatically shortening test\r\n  and suite startup times.\r\n* Added support for absolute pathnames to the `load` helper.\r\n* Added support for single-line `@test` definitions.\r\n* Added bats(1) and bats(7) manual pages.\r\n* Modified the `bats` command to default to TAP output when the `$CI`\r\n  variable is set, to better support environments such as Travis CI.\r\n\r\n*0.3.1* (October 28, 2013)\r\n\r\n* Fixed an incompatibility with the pretty formatter in certain\r\n  environments such as tmux.\r\n* Fixed a bug where the pretty formatter would crash if the first line\r\n  of a test file's output was invalid TAP.\r\n\r\n*0.3.0* (October 21, 2013)\r\n\r\n* Improved formatting for tests run from a terminal. Failing tests\r\n  are now colored in red, and the total number of failing tests is\r\n  displayed at the end of the test run. When Bats is not connected to\r\n  a terminal (e.g. in CI runs), or when invoked with the `--tap` flag,\r\n  output is displayed in standard TAP format.\r\n* Added the ability to skip tests using the `skip` command.\r\n* Added a message to failing test case output indicating the file and\r\n  line number of the statement that caused the test to fail.\r\n* Added \"ad-hoc\" test suite support. You can now invoke `bats` with\r\n  multiple filename or directory arguments to run all the specified\r\n  tests in aggregate.\r\n* Added support for test files with Windows line endings.\r\n* Fixed regular expression warnings from certain versions of Bash.\r\n* Fixed a bug running tests containing lines that begin with `-e`.\r\n\r\n*0.2.0* (November 16, 2012)\r\n\r\n* Added test suite support. The `bats` command accepts a directory\r\n  name containing multiple test files to be run in aggregate.\r\n* Added the ability to count the number of test cases in a file or\r\n  suite by passing the `-c` flag to `bats`.\r\n* Preprocessed sources are cached between test case runs in the same\r\n  file for better performance.\r\n\r\n*0.1.0* (December 30, 2011)\r\n\r\n* Initial public release.\r\n\r\n---\r\n\r\n© 2014 Sam Stephenson. Bats is released under an MIT-style license;\r\nsee `LICENSE` for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}